[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DSFI_A2",
    "section": "",
    "text": "The State of the Nation Address (SONA) serves as an annual narrative roadmap of South Africa, highlighting its triumphs, challenges, and future trajectories. Delivered by the President, this address not only provides a summary of the nation’s current status but also sets the tone for governmental strategies, policies, and priorities for the coming year. The addresses serve as a snapshot into South Africa’s challenges, successes and socioeconomic state at a given time. Hence analysis of the sentiment and topics of the speeches can provide a framework for a deeper understanding of trends and topics from presidents’ rhetoric less clouded by the bias of political analysts.\nIn the era of data science, where Natural Language Processing(NLP) has become a potent tool to extract meaningful patterns from large volumes of textual data, it is of profound interest to apply such methods to SONA speeches. By employing advanced techniques such as sentiment analysis and topic modelling, one can unearth the latent themes dominating these addresses over three decades and gauge the sentiment fluctuations accompanying them. This presents a data-driven perspective on South Africa’s political discourse,\nThe following proceeds XXX first sections. Firstly a literature review will be conducted on the existing sentiment analysis and topic modelling methods available and used in academia and industry. Thereafter a preliminary exploration of the data occurs to understand the structure and potential trends in the data prior to modelling applications. The Methods section will then detail the sentiment analysis, topic modelling and metrics used in these models. The results of the paper are briefly presented and interpreted before we discuss the overall trends and findings of the paper. We conclude by surmising the findings of the paper, highlighting limitations and presenting avenues for future research into SONA NLP work.\n\npip install transformers\n\nRequirement already satisfied: transformers in /opt/anaconda3/envs/firstEnv/lib/python3.10/site-packages (4.34.0)\n\n\nRequirement already satisfied: filelock in /opt/anaconda3/envs/firstEnv/lib/python3.10/site-packages (from transformers) (3.12.4)\nRequirement already satisfied: safetensors>=0.3.1 in /opt/anaconda3/envs/firstEnv/lib/python3.10/site-packages (from transformers) (0.4.0)\nRequirement already satisfied: requests in /opt/anaconda3/envs/firstEnv/lib/python3.10/site-packages (from transformers) (2.28.1)\nRequirement already satisfied: pyyaml>=5.1 in /opt/anaconda3/envs/firstEnv/lib/python3.10/site-packages (from transformers) (6.0.1)\nRequirement already satisfied: packaging>=20.0 in /opt/anaconda3/envs/firstEnv/lib/python3.10/site-packages (from transformers) (21.3)\nRequirement already satisfied: huggingface-hub<1.0,>=0.16.4 in /opt/anaconda3/envs/firstEnv/lib/python3.10/site-packages (from transformers) (0.17.3)\nRequirement already satisfied: numpy>=1.17 in /opt/anaconda3/envs/firstEnv/lib/python3.10/site-packages (from transformers) (1.24.4)\nRequirement already satisfied: regex!=2019.12.17 in /opt/anaconda3/envs/firstEnv/lib/python3.10/site-packages (from transformers) (2023.8.8)\nRequirement already satisfied: tokenizers<0.15,>=0.14 in /opt/anaconda3/envs/firstEnv/lib/python3.10/site-packages (from transformers) (0.14.1)\nRequirement already satisfied: tqdm>=4.27 in /opt/anaconda3/envs/firstEnv/lib/python3.10/site-packages (from transformers) (4.66.1)\n\n\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /opt/anaconda3/envs/firstEnv/lib/python3.10/site-packages (from huggingface-hub<1.0,>=0.16.4->transformers) (4.3.0)\nRequirement already satisfied: fsspec in /opt/anaconda3/envs/firstEnv/lib/python3.10/site-packages (from huggingface-hub<1.0,>=0.16.4->transformers) (2023.9.2)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/anaconda3/envs/firstEnv/lib/python3.10/site-packages (from packaging>=20.0->transformers) (3.0.9)\n\n\nRequirement already satisfied: charset-normalizer<3,>=2 in /opt/anaconda3/envs/firstEnv/lib/python3.10/site-packages (from requests->transformers) (2.1.1)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/anaconda3/envs/firstEnv/lib/python3.10/site-packages (from requests->transformers) (2022.6.15)\nRequirement already satisfied: idna<4,>=2.5 in /opt/anaconda3/envs/firstEnv/lib/python3.10/site-packages (from requests->transformers) (3.3)\nRequirement already satisfied: urllib3<1.27,>=1.21.1 in /opt/anaconda3/envs/firstEnv/lib/python3.10/site-packages (from requests->transformers) (1.26.11)\n\n\nNote: you may need to restart the kernel to use updated packages.\n\n\n\na2data = pd.read_csv(\"finalSentences2.csv\")\na2tokens = pd.read_csv(\"finalTokens.csv\")"
  },
  {
    "objectID": "index.html#hugging-face-1",
    "href": "index.html#hugging-face-1",
    "title": "DSFI_A2",
    "section": "Hugging Face 1",
    "text": "Hugging Face 1\nlink: https://huggingface.co/cardiffnlp/twitter-roberta-base-sentiment-latest?text=ayo\n\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification, AutoConfig\nimport numpy as np\nfrom scipy.special import softmax\n\n/opt/anaconda3/envs/firstEnv/lib/python3.10/site-packages/tqdm/auto.py:21: TqdmWarning:\n\nIProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n\n\n\n\nHFM1 = pd.read_csv(\"HFM1_SentimentData.csv\")\npresidents_order = ['Mandela', 'deKlerk', 'Mbeki', ' Motlanthe', 'Zuma', 'Ramaphosa']\nmean_scores_per_president = HFM1.groupby('Presidents')['Sentiment_Score'].mean()\nadjusted_presidents_order = ['deKlerk'] + [president for president in presidents_order if president != 'deKlerk']\nmean_scores_reordered = mean_scores_per_president.reindex(adjusted_presidents_order)\n\n# Plotting the reordered mean sentiment scores\nplt.figure(figsize=(12, 7))\nmean_scores_reordered.plot(kind='bar', color='skyblue')\nplt.title('Mean Sentiment Scores per President')\nplt.xlabel('President')\nplt.ylabel('Mean Sentiment Score')\nplt.axhline(0, color='red', linestyle='--')  #line at y=0 for reference\nplt.tight_layout()\nplt.show()\n\n\n\n\n\ncolors = {'negative': '#FF9999', 'neutral': '#99CCFF', 'positive': '#99FF99'}\nsentiment_counts = HFM1.groupby('Presidents')['Predicted_Label'].value_counts(normalize=True).unstack().fillna(0)\n\nsentiment_counts.reindex(adjusted_presidents_order).plot(kind='bar', stacked=True, figsize=(12,7), color=[colors[col] for col in sentiment_counts.columns])\nplt.title('Sentiment Distribution per President')\nplt.ylabel('Percentage')\nplt.xlabel('President')\nplt.legend(title='Sentiment')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\nfrom matplotlib.colors import LinearSegmentedColormap\nfrom matplotlib import cm\nfrom matplotlib import cm\n\ndef plot_for_president_gradient(president, df):\n    # Filter dataframe for the selected president\n    president_df = df[df['Presidents'] == president]\n    \n    # Sorting data by order (using the 'Unnamed: 0' column as the order)\n    president_df = president_df.sort_values(by='Unnamed: 0')\n    \n    # Normalize the scores to [0,1] for colormap\n    norm = plt.Normalize(-1, 1)\n    \n    # Custom colormap: Red -> Gray -> Blue\n    custom_cmap = LinearSegmentedColormap.from_list(\"custom\", [\"red\", \"gray\", \"blue\"])\n    \n    # Plotting with a black background and custom colormap\n    fig, ax = plt.subplots(figsize=(10, 5))\n    bars = ax.bar(np.arange(len(president_df)), president_df['Sentiment_Score'], \n                  color=custom_cmap(norm(president_df['Sentiment_Score'])), width=1.0)\n    \n    ax.set_title(f'Sentiment Score over time for President {president}')\n    ax.set_xlabel('Order of Sentences')\n    ax.set_ylabel('Sentiment Intensity')\n    ax.axhline(0, color='white',linewidth=0.5)\n    ax.grid(axis='y', color='white', linestyle='--', linewidth=0.5)\n    ax.set_facecolor('black')\n    fig.colorbar(cm.ScalarMappable(norm=norm, cmap=custom_cmap), ax=ax, label='Sentiment Score')\n    \n    plt.show()\n\n\npresidents_list = HFM1['Presidents'].unique()\ndef plot_in_grid(president, ax):\n    \"\"\"Plot sentiment scores for a given president on a given axes.\"\"\"\n    president_df = HFM1[HFM1['Presidents'] == president]\n    president_df = president_df.sort_values(by='Unnamed: 0')\n    \n    # Normalize the scores for colormap\n    norm = plt.Normalize(-1, 1)\n    custom_cmap = LinearSegmentedColormap.from_list(\"custom\", [\"red\", \"gray\", \"blue\"])\n\n    bars = ax.bar(np.arange(len(president_df)), president_df['Sentiment_Score'], \n                  color=custom_cmap(norm(president_df['Sentiment_Score'])), width=1.0)\n    ax.set_title(f'{president}')\n    ax.axhline(0, color='white', linewidth=0.5)\n    ax.grid(axis='y', color='white', linestyle='--', linewidth=0.5)\n    ax.set_facecolor('black')\n\n# Creating a 2x3 grid plot for all presidents\nfig, axes = plt.subplots(2, 3, figsize=(18, 10))\nfig.suptitle('Sentiment Scores over time for each President', fontsize=16)\n\nfor president, ax in zip(adjusted_presidents_order, axes.ravel()):\n    plot_in_grid(president, ax)\n\n# Adjust layout\nplt.tight_layout()\nplt.subplots_adjust(top=0.90)\nplt.show()\n\n\n\n\n\npastel_colors = ['#FFB3BA', '#FFDFBA', '#FFFFBA', '#BAFFC9', '#BAE1FF', '#D9BAFF']\n\ndef plot_histogram(president, color, ax):\n    \"\"\"Plot histogram of sentiment scores for a given president on a given axes.\"\"\"\n    president_df = HFM1[HFM1['Presidents'] == president]\n    ax.hist(president_df['Sentiment_Score'], bins=30, color=color, edgecolor='white')\n    ax.set_title(f'{president}')\n    ax.set_xlabel('Sentiment Score')\n    ax.set_ylabel('Frequency')\n    ax.grid(axis='y', linestyle='--', linewidth=0.5)\n\n# Creating a 2x3 grid plot for histograms of all presidents\nfig, axes = plt.subplots(2, 3, figsize=(18, 10))\nfig.suptitle('Distribution of Sentiment Scores for each President', fontsize=16)\n\nfor president, color, ax in zip(adjusted_presidents_order, pastel_colors, axes.ravel()):\n    plot_histogram(president, color, ax)\n\n# Adjust layout\nplt.tight_layout()\nplt.subplots_adjust(top=0.90)\nplt.show()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]