[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DSFI_A2",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "index.html#hugging-face-1",
    "href": "index.html#hugging-face-1",
    "title": "DSFI_A2",
    "section": "Hugging Face 1",
    "text": "Hugging Face 1\nlink: https://huggingface.co/cardiffnlp/twitter-roberta-base-sentiment-latest?text=ayo\n\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification, AutoConfig\nimport numpy as np\nfrom scipy.special import softmax\n\n\nHFM1 = pd.read_csv(\"HFM1_SentimentData.csv\")\npresidents_order = ['Mandela', 'deKlerk', 'Mbeki', 'Motlanthe', 'Zuma', 'Ramaphosa']\nmean_scores_per_president = HFM1.groupby('Presidents')['Sentiment_Score'].mean()\nadjusted_presidents_order = ['deKlerk'] + [president for president in presidents_order if president != 'deKlerk']\nmean_scores_reordered = mean_scores_per_president.reindex(adjusted_presidents_order)\n\n# Plotting the reordered mean sentiment scores\nplt.figure(figsize=(12, 7))\nmean_scores_reordered.plot(kind='bar', color='skyblue')\nplt.title('Mean Sentiment Scores per President')\nplt.xlabel('President')\nplt.ylabel('Mean Sentiment Score')\nplt.axhline(0, color='red', linestyle='--')  #line at y=0 for reference\nplt.tight_layout()\nplt.show()\n\n\n\n\n\ncolors = {'negative': '#FF9999', 'neutral': '#99CCFF', 'positive': '#99FF99'}\nsentiment_counts = HFM1.groupby('Presidents')['Predicted_Label'].value_counts(normalize=True).unstack().fillna(0)\n\nsentiment_counts.reindex(adjusted_presidents_order).plot(kind='bar', stacked=True, figsize=(12,7), color=[colors[col] for col in sentiment_counts.columns])\nplt.title('Sentiment Distribution per President')\nplt.ylabel('Percentage')\nplt.xlabel('President')\nplt.legend(title='Sentiment')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\nfrom matplotlib.colors import LinearSegmentedColormap\nfrom matplotlib import cm\nfrom matplotlib import cm\n\ndef plot_for_president_gradient(president, df):\n    # Filter dataframe for the selected president\n    president_df = df[df['Presidents'] == president]\n    \n    # Sorting data by order (using the 'Unnamed: 0' column as the order)\n    president_df = president_df.sort_values(by='Unnamed: 0')\n    \n    # Normalize the scores to [0,1] for colormap\n    norm = plt.Normalize(-1, 1)\n    \n    # Custom colormap: Red -> Gray -> Blue\n    custom_cmap = LinearSegmentedColormap.from_list(\"custom\", [\"red\", \"gray\", \"blue\"])\n    \n    # Plotting with a black background and custom colormap\n    fig, ax = plt.subplots(figsize=(10, 5))\n    bars = ax.bar(np.arange(len(president_df)), president_df['Sentiment_Score'], \n                  color=custom_cmap(norm(president_df['Sentiment_Score'])), width=1.0)\n    \n    ax.set_title(f'Sentiment Score over time for President {president}')\n    ax.set_xlabel('Order of Sentences')\n    ax.set_ylabel('Sentiment Intensity')\n    ax.axhline(0, color='white',linewidth=0.5)\n    ax.grid(axis='y', color='white', linestyle='--', linewidth=0.5)\n    ax.set_facecolor('black')\n    fig.colorbar(cm.ScalarMappable(norm=norm, cmap=custom_cmap), ax=ax, label='Sentiment Score')\n    \n    plt.show()\n\n\npresidents_list = HFM1['Presidents'].unique()\ndef plot_in_grid(president, ax):\n    \"\"\"Plot sentiment scores for a given president on a given axes.\"\"\"\n    president_df = HFM1[HFM1['Presidents'] == president]\n    president_df = president_df.sort_values(by='Unnamed: 0')\n    \n    # Normalize the scores for colormap\n    norm = plt.Normalize(-1, 1)\n    custom_cmap = LinearSegmentedColormap.from_list(\"custom\", [\"red\", \"gray\", \"blue\"])\n\n    bars = ax.bar(np.arange(len(president_df)), president_df['Sentiment_Score'], \n                  color=custom_cmap(norm(president_df['Sentiment_Score'])), width=1.0)\n    ax.set_title(f'{president}')\n    ax.axhline(0, color='white', linewidth=0.5)\n    ax.grid(axis='y', color='white', linestyle='--', linewidth=0.5)\n    ax.set_facecolor('black')\n\n# Creating a 2x3 grid plot for all presidents\nfig, axes = plt.subplots(2, 3, figsize=(18, 10))\nfig.suptitle('Sentiment Scores over time for each President', fontsize=16)\n\nfor president, ax in zip(adjusted_presidents_order, axes.ravel()):\n    plot_in_grid(president, ax)\n\n# Adjust layout\nplt.tight_layout()\nplt.subplots_adjust(top=0.90)\nplt.show()\n\n\n\n\n\npastel_colors = ['#FFB3BA', '#FFDFBA', '#FFFFBA', '#BAFFC9', '#BAE1FF', '#D9BAFF']\n\ndef plot_histogram(president, color, ax):\n    \"\"\"Plot histogram of sentiment scores for a given president on a given axes.\"\"\"\n    president_df = HFM1[HFM1['Presidents'] == president]\n    ax.hist(president_df['Sentiment_Score'], bins=30, color=color, edgecolor='white')\n    ax.set_title(f'{president}')\n    ax.set_xlabel('Sentiment Score')\n    ax.set_ylabel('Frequency')\n    ax.grid(axis='y', linestyle='--', linewidth=0.5)\n\n# Creating a 2x3 grid plot for histograms of all presidents\nfig, axes = plt.subplots(2, 3, figsize=(18, 10))\nfig.suptitle('Distribution of Sentiment Scores for each President', fontsize=16)\n\nfor president, color, ax in zip(adjusted_presidents_order, pastel_colors, axes.ravel()):\n    plot_histogram(president, color, ax)\n\n# Adjust layout\nplt.tight_layout()\nplt.subplots_adjust(top=0.90)\nplt.show()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]