[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DSFI_A2",
    "section": "",
    "text": "The State of the Nation Address (SONA) serves as an annual narrative roadmap of South Africa, highlighting its triumphs, challenges, and future trajectories. Delivered by the President, this address not only provides a summary of the nation’s current status but also sets the tone for governmental strategies, policies, and priorities for the coming year. The addresses serve as a snapshot into South Africa’s challenges, successes and socioeconomic state at a given time. Hence analysis of the sentiment and topics of the speeches can provide a framework for a deeper understanding of trends and topics from presidents’ rhetoric less clouded by the bias of political analysts.\nIn the era of data science, where Natural Language Processing(NLP) has become a potent tool to extract meaningful patterns from large volumes of textual data, it is of profound interest to apply such methods to SONA speeches. By employing advanced techniques such as sentiment analysis and topic modelling, one can unearth the latent themes dominating these addresses over three decades and gauge the sentiment fluctuations accompanying them. This presents a data-driven perspective on South Africa’s political discourse,\nThe following proceeds XXX first sections. Firstly a literature review will be conducted on the existing sentiment analysis and topic modelling methods available and used in academia and industry. Thereafter a preliminary exploration of the data occurs to understand the structure and potential trends in the data prior to modelling applications. The Methods section will then detail the sentiment analysis, topic modelling and metrics used in these models. The results of the paper are briefly presented and interpreted before we discuss the overall trends and findings of the paper. We conclude by surmising the findings of the paper, highlighting limitations and presenting avenues for future research into SONA NLP work."
  },
  {
    "objectID": "index.html#sentiment-analysis",
    "href": "index.html#sentiment-analysis",
    "title": "DSFI_A2",
    "section": "Sentiment Analysis",
    "text": "Sentiment Analysis\nSentiment Analysis is a prominent field within the broader scope of NLP techniques, and it has gained significant attention in scientific research in recent years. Sentiment classification, specifically polarity estimation, is amongst the most extensively studied tasks of sentiment analysis. Polarity is often categorized as either positive or negative, but a third category labeled as “neutral” can be introduced (Wang et al., 2014). This is what our sentiment analysis will focus on.\nThere are two primary approaches to sentiment analysis, the machine learning and lexicon-based approaches.\nThe other primary approach to sentiment analysis is the lexicon-based approach. This approach analyzes each word in a document and gives it a score, on a scale where one side is completely negative, and the other is completely positive, with neutral in the middle. For example, words that would get a negative rating include, “ugly”, while a positively rated word is “good”(Ligthart et al., 2021). (Vinodhini 2012) notes that lexicons are heavily reliant on the domain, due to the type of language used in different fields. This is why adjusting the lexicon to the target domain is needed, however can be very time consuming.\nTwo popular lexicons are AFINN and NRC. AFINN gives words a rating between -5 and 5, with -5 meaning a very negative word while 5 indicates that the word is very positive (Al-Shabi, 2020). The lexicon was created by Finn Arup Nielsen. The NRC Emotion Lexicon (Mohammad & Turney, 2010) on the other hand focuses on emotional words only, and provides a list of 13,872 terms in several categories. Specifically, the terms are classified as “negative”, “positive”, and then based on (Plutchik, 1980), words have corresponding can have associated emotions: “anger”, “disgust”, “fear”, “sadness”, “joy” , “anticipation”, “trust”, and “surprise”. These are the two lexicons we will be using in this paper.\nMachine learning approaches for sentiment analysis tasks are divided into three categories: unsupervised learning, semi-supervised learning, and supervised learning. Unsupervised learning methods cluster unlabeled data into groups that exhibit similarity (Li and Liu 2014). Semi-supervised learning makes use of both labeled and unlabelled data in the training process (da Silva et al. 2016a, b), and can lead to good model performance while less human work is required compared to supervised learning. Supervised learning, which is the most human-intensive, occurs when a model is trained on fully labeled data. This can often result in the optimal model performance, however due to the requirement of labeled data it can lead to inefficiencies (Hemmatian and Sohrabi 2017).\nAccording to (Yadav and Vishwakarma, 2019) who reviewed over 100 papers which used deep learning (subset of machine learning) techniques to perform sentiment analysis, the most common deep learning models are RNNs, CNNs, and LSTMs, with the latter providing the best performance. They also said that utilizing machine learning approaches to conduct sentiment analysis was a promising field, while noting that the dataset needs to be large enough for a respectable analysis to take place, which is a challenge.\nFurthermore, (Loureiro et al., 2022) showed the importance of Time language models, which are a set of language models which undergo continual learning on, in this case, tweets. (Loureiro et al., 2022) shows that this approach enhances the models ability to deal with out-of-distribution inputs, as well enhances competitiveness with standard benchmark tests. They’re also seen to deal well with the problem of concept drift. Since our data is over a long period of time, we will be using these time language models too."
  },
  {
    "objectID": "index.html#sentiment-analysis-1",
    "href": "index.html#sentiment-analysis-1",
    "title": "DSFI_A2",
    "section": "Sentiment Analysis",
    "text": "Sentiment Analysis\n\nAFINN\nThe AFINN lexicon is a valuable resource consisting of a vast list of English words, with each word meticulously assigned a sentiment score. These scores span a numerical range from -5 to 5, encompassing the spectrum of sentiments present in the English language. Negative sentiment is represented by scores in the negative range, where more negative scores signify a greater intensity of negative emotion associated with the word. Conversely, positive sentiment is conveyed through positive scores, with the magnitude of the positive number indicating the degree of positivity linked to the word. Words with a neutral sentiment receive a score of 0, indicating their emotional neutrality.\nIn practice, the sentiment analysis process unfolds by systematically evaluating the words within each sentence in the dataset. For each word in a sentence, its associated sentiment score is extracted from the AFINN lexicon. Subsequently, the sentiment scores for all the words in a sentence are summed to compute the overall sentiment of that sentence. This method, in turn, facilitates the categorization of sentences by the president delivering them. The collective sentiment analysis allows for a comprehensive examination of the language employed and the emotional disposition of each president, thereby providing valuable insights into the emotional nuances that characterize their speeches.\n\n\nNRC lexicon\nThe NRC lexicon is a comprehensive linguistic resource that encompasses a substantial collection of English words. Each word in this lexicon is associated with specific emotional and sentiment categories, such as joy, sadness, anger, trust, and fear, among others. These categories offer a more detailed perspective on the emotions of South African presidents compared to other lexicons. Words are tagged with binary values indicating whether they evoke a particular emotion or sentiment, making it possible to identify not only the polarity of the sentiment (positive or negative) but also the specific emotional dimension.\nThis is conducted by once again analysing each sentence in the dataset and selecting the emotion associated with each word within a sentence based on the NRC lexicon. By assigning these emotional labels to individual words, a more comprehensive and fine-grained understanding of sentiment and emotion within text is achieved. The collective emotional and sentiment labels for words in a sentence are then aggregated over all sentences to compute the overall sentiment and emotional composition of each president. This grouping by president allows for an in-depth exploration of the specific emotional and sentimental patterns and variations exhibited by each president in their speeches. This approach thus offers the positivity/negativity metric offered by the AFINN lexicon, but also decomposes these broad categories into specific emotions.\n\n\nRoBERTa Transfer Learning\nFor sentiment analysis, we also employed a model belonging to hugging face called “twitter-roberta-base-sentiment-latest” and ““. The architecture for these models is largely the same, but”” differs in that it was trained primarily on political tweets, which is lesser in the training data size but potentially more domain relevant to the task at hand.\nThis is a transformer-based transfer learning approach. Essentially this means that the model has been pretrained on data to learn how to assign sentiment scores then the trained model is used to extract sentiment scores for our dataset. The model used is more specifically considered a time language model. The time Language Models (LM) foundation is anchored on the RoBERTa architecture, which is a refined variant of BERT (Bidirectional Encoder Representations from Transformers). One of the standout characteristics of RoBERTa is its bidirectional context processing. Unlike conventional models, RoBERTa reviews words in relation to their entire surrounding context, absorbing nuances from both the preceding and following parts of the text.\nMoreover, RoBERTa adopts a Transformer architecture, known for its self-attention mechanism. This mechanism empowers RoBERTa to assign varying importance levels to distinct words in a sentence, ensuring it recognizes and processes dependencies irrespective of their dispersion within the body of text.\nKey to its training process is RoBERTa’s utilization of masked language modelling. Here, select words in a sentence are intermittently substituted with a [MASK] token. The model is then tasked with deducing the original word, relying solely on the surrounding context. This method is important in refining RoBERTa’s grasp of language semantics.\nDifferentiating from its predecessor, BERT, RoBERTa’s pretraining process has been further optimized. It undergoes training on a more expansive dataset of 10 years of Twitter data. Another differentiating factor from BERT is how RoBERTa dispenses with the next sentence prediction task, a staple in BERT, and recalibrates the masking strategy to elevate its efficiency. The RoBERTa model for a given body of text returns a class probability value of -1 for negative sentiment, 0 for neutral and 1 for positive the highest probability over the three classes is the assigned sentiment. We multiply the class values by their probabilities and sum them to gain a sentiment score between -1 and 1 and use this coupled with the assigned sentiment class for our model evaluation."
  },
  {
    "objectID": "index.html#topic-modelling",
    "href": "index.html#topic-modelling",
    "title": "DSFI_A2",
    "section": "Topic Modelling",
    "text": "Topic Modelling\n\nLatent Dirichlet Allocation\nLatent Dirichlet Allocation (LDA) is a probabilitistic model which was implemented as a topic modelling technique to extract meaningful latent topics from the SONA corpus. The SONA speeches are pre-processed to remove stop words, punctuation, and other textual debris. The documents are then lemmatised and tokenised into word-tokens. These tokens are used to create a document-term matrix that contains the frequency of words in each document. The Gensim library was used to enable the training of LDA models on the preprocessed data, and facilitated the extraction of topics associated with their respective word distributions. The resulting topics were then visualized using the pyLDAvis package, to create a interpretable overview of the extracted topics. This process was first performed using a corpus containing all thirty-six speeches. The initial model had five topics, and the number of topics was iteratively decreased until the topics differentiated nicely across the latent variables. This number of topics (3) was then used to train a model for each president’s individual corpus of speeches.\n\n\nProbablistic Latent Semantic Analysis\nProbablistic Latent Semantic Analysis (pLSA) is the second topic modelling technique used to extract latent topics from the corpus of documents. The text data is preprocessed similarly to LDA; removing stop words, punctuation, and debris, followed by lemmatisation and tokenisation, and then the creation of a document-term matrix. After the pre-processing is complete, pLSA begins by initialising random probabilities for topics and words within topics. The topic and word probabilties are then iteratively updated using the Expectation Maximisation (EM) algorithm. Once the algorithm reaches convergence, there is a resulting set of topics, each containing a set of words. The Gensim package was used to implement the training of the pLSA models, and the matplotlib package was used to visualise the results."
  },
  {
    "objectID": "index.html#results-and-discussion",
    "href": "index.html#results-and-discussion",
    "title": "DSFI_A2",
    "section": "Results and Discussion",
    "text": "Results and Discussion\n\nLatent Dirichlet Allocation\nThe ALL models were trained on the corpus of all thirty-six speeches, iteratively decreasing the number of topics from five until three. At five topics, two of the topics are almost overlaid - indicating that they are closely linked and probably contain a single topic. At four topics, one of the topics sits almost on the origin of the latent variables. This suggests that this ‘topic’ does not have differentiating features and likely consists of neutral words, for example it contains ‘new’, ‘also’, and a set of numbers, ‘one’, ‘two’, ‘million’. The third model, with three topics, has three clearly differentiated topics sitting at the extremes of the latent variables axes. Three-topics models were then trained for each of the presidents, using only their respective speeches as the corpus. We gave the top ten words from each topic for each presidents’ model and for the three-topic ALL model to ChatGPT to see if it could discern the nature of the topics identified by the LDA models. The output is as follows:\nLDA-Ramaphosa:\n\nTopic 1: People and societal needs - this topic includes words related to the needs of the people and society. This could be associated with President Ramaphosa’s focus on addressing the needs of the South African population, which could include policies related to social welfare and community development.\n\nExamples: “people,” “need,” “african”.\n\nTopic 2: Economic development and business - President Ramaphosa is known for promoting economic development and business growth in South Africa. This topic contains words related to business and economic sectors.\n\nExamples: “business,” “government,” “economic”.\n\nTopic 3: Time and work commitment - this topic contains words related to time and work commitment, possibly reflecting President Ramaphosa’s commitment to his role and responsibilities as a leader.\n\nExamples: “year,” “work,” “must”.\n\n\nLDA-Zuma:\n\nTopic 1: South Africa and government - this topic includes words related to South Africa and government. President Zuma’s tenure was marked by various political and governmental issues, making this a prominent topic.\n\nExamples: “south,” “government,” “africa”\n\nTopic 2: Economic sectors and development - President Zuma’s administration likely involved policies and discussions related to economic sectors and development, as indicated by the words in this topic.\n\nExamples: “sector,” “new,” “economic”\n\nTopic 3: Time and population - this topic may be associated with President Zuma’s time in office and concerns related to the South African population.\n\nExamples: “year,” “country,” “million”\n\n\nLDA-Mandela:\n\nTopic 1: Public affairs and the country - this topic encompasses words associated with public affairs and the country. Given Nelson Mandela’s role as South Africa’s first post-apartheid president, it’s likely that topics related to the nation were significant.\n\nExamples: “public,” “country,” “african”\n\nTopic 2: Government work and public service - President Mandela’s government focused on public service and the work required to build a new South Africa.\n\nExamples: “government,” “work,” “service”\n\nTopic 3: Time and commitment - Words related to time and commitment reflect Mandela’s dedication to the country and his work.\n\nExample: “year,” “must,” “national”\n\n\nLDA-deKlerk:\n\nTopic 1: Political alliance and elections - this topic includes words related to political alliances and elections. President de Klerk played a crucial role in the transition from apartheid to democracy.\n\nExamples: “alliance,” “election,” “african”\n\nTopic 2: Constitution and political parties - given his role in the negotiation of South Africa’s new constitution, this topic reflects words related to the constitution and political parties.\n\nExamples: “constitution,” “party,” “power”\n\nTopic 3: South African provinces and constitutional concerns - the words in this topic may relate to the various provinces in South Africa and constitutional concerns that were addressed during his leadership.\n\nExamples: “south,” “province,” “constitutional”\n\n\nLDA-Mbeki:\n\nTopic 1: Time and government programs - this topic could be associated with President Mbeki’s focus on time-bound government programs and initiatives.\n\nExamples: “year,” “programme,” “government”\n\nTopic 2: National issues and the country - this topic encompasses words related to national issues and the country, reflecting his leadership during a period of significant national importance.\n\nExamples: “country,” “national,” “work”\n\nTopic 3: Economic sectors and government efforts - President Mbeki’s administration focused on economic sectors and government efforts, as indicated by the words in this topic.\n\nExamples: “sector,” “effort,” “government”\n\n\nLDA-Motlanthe: + Topic 1 - South Africa and African development - this topic includes words related to South Africa and African development, reflecting a focus on regional and national development. + Examples: “south,” “african,” “development” + Topic 2: Government work and public sector - this topic likely represents the emphasis on government work and the public sector during President Motlanthe’s leadership. + Examples: “government,” “sector,” “regard” + Topic 3: Economic development and work - words related to economic development and work suggest a focus on economic policies and employment during his tenure. + Examples: “economic,” “work,” “growth”\nLDA-All:\n\nTopic 1: South Africa and African development - this topic emphasizes South Africa and its development, which is a broad, overarching theme applicable to all six Presidents.\n\nExamples: “south,” “africa,” “new”\n\nTopic 2: People, work, and service - this topic encompasses words related to the people, their work, and the services provided, reflecting the importance of public service and commitment.\n\nExamples: “people,” “work,” “service” Topic 3 - Time and government - the words in this topic are related to time, government, and national affairs, indicating a focus on governance and the passage of time across all Presidential terms.\nExamples: “year,” “african,” “government”\n\n\n\n\nProbablistic Latent Semantic Analysis\npLSA models are very sensitive to data sparsity, the document-term matrix has only around a third of its cells populated. The model struggles to capture meaningful relationships through its dimensionality reduction techniques in the sparse data."
  },
  {
    "objectID": "Appendix.html",
    "href": "Appendix.html",
    "title": "Appendix",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom gensim.models import LdaModel, LsiModel\nfrom gensim import corpora\n\n\nm_pLSA_6 = LsiModel.load(\"topic_models/m_pLSA_6\")\nm_pLSA_9 = LsiModel.load(\"topic_models/m_pLSA_9\")\n\n# Number of words to display in the bar plot\nnum_words = 20\n\ntopics = m_pLSA_6.print_topics(num_topics=6, num_words=num_words)\ndf6=pd.DataFrame({})\nfor topic in topics:\n    t=topic[0]+1\n    content = topic[1]\n    words=[]\n    scores=[]\n    scorewords = content.split(' + ')\n    for item in scorewords:\n        spl=item.split('*')\n        scores.append(spl[0])\n        words.append(spl[1].replace('\"',''))\n    topic_df=pd.DataFrame({f'T{t} Words': words, f'T{t} Scores': scores})\n    df6 = pd.concat([df6, topic_df], axis=1)\n\ntopics = m_pLSA_9.print_topics(num_topics=9, num_words=num_words)\ndf9=pd.DataFrame({})\nfor topic in topics:\n    content = topic[1]\n    words=[]\n    scores=[]\n    scorewords = content.split(' + ')\n    for item in scorewords:\n        spl=item.split('*')\n        scores.append(spl[0])\n        words.append(spl[1].replace('\"',''))\n    topic_df=pd.DataFrame({f'T{topic[0]+1} Words': words, f'T{topic[0]+1} Scores': scores})\n    df9 = pd.concat([df9, topic_df], axis=1)\n\n\n# Create a 3x2 grid of subplots\nfig, axs = plt.subplots(3, 2, figsize=(12, 8))\nfor i in [0,1,2]:\n    for j in [0,1]:\n        t=2*i+j+1\n        axs[i, j].barh(df6[f'T{t} Words'], df6[f'T{t} Scores'])\n        axs[i, j].set_xlabel('Words')\n        axs[i, j].set_ylabel('Weight')\n        axs[i, j].set_title(f'M6: Topic {t}')\n        axs[i, j].tick_params(axis='x', rotation=90, labelsize=10)\n        axs[i, j].tick_params(axis='y', rotation=0, labelsize=6)\nplt.tight_layout()\nplt.show()\n\n# Create a 3x3 grid of subplots\nfig, axs = plt.subplots(3, 3, figsize=(12, 8))\nfor i in [0,1,2]:\n    for j in [0,1,2]:\n        t=3*i+j+1\n        axs[i, j].barh(df9[f'T{t} Words'], df9[f'T{t} Scores'])\n        axs[i, j].set_xlabel('Words')\n        axs[i, j].set_ylabel('Weight')\n        axs[i, j].set_title(f'M9: Topic {t}')\n        axs[i, j].tick_params(axis='x', rotation=90, labelsize=10)\n        axs[i, j].tick_params(axis='y', rotation=0, labelsize=6)\nplt.tight_layout()\nplt.show()"
  }
]