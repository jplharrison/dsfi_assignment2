## Sentiment Analysis

## Methods

### AFINN

The AFINN lexicon is a valuable resource consisting of a vast list of English words, with each word meticulously assigned a sentiment score. These scores span a numerical range from -5 to 5, encompassing the spectrum of sentiments present in the English language. Negative sentiment is represented by scores in the negative range, where more negative scores signify a greater intensity of negative emotion associated with the word. Conversely, positive sentiment is conveyed through positive scores, with the magnitude of the positive number indicating the degree of positivity linked to the word. Words with a neutral sentiment receive a score of 0, indicating their emotional neutrality.

In practice, the sentiment analysis process unfolds by systematically evaluating the words within each sentence in the dataset. For each word in a sentence, its associated sentiment score is extracted from the AFINN lexicon. Subsequently, the sentiment scores for all the words in a sentence are summed to compute the overall sentiment of that sentence. This method, in turn, facilitates the categorization of sentences by the president delivering them. The collective sentiment analysis allows for a comprehensive examination of the language employed and the emotional disposition of each president, thereby providing valuable insights into the emotional nuances that characterize their speeches.

### NRC lexicon

The NRC lexicon is a comprehensive linguistic resource that encompasses a substantial collection of English words. Each word in this lexicon is associated with specific emotional and sentiment categories, such as joy, sadness, anger, trust, and fear, among others. These categories offer a more detailed perspective on the emotions of South African presidents compared to other lexicons. Words are tagged with binary values indicating whether they evoke a particular emotion or sentiment, making it possible to identify not only the polarity of the sentiment (positive or negative) but also the specific emotional dimension.

This is conducted by once again analysing each sentence in the dataset and selecting the emotion associated with each word within a sentence based on the NRC lexicon. By assigning these emotional labels to individual words, a more comprehensive and fine-grained understanding of sentiment and emotion within text is achieved. The collective emotional and sentiment labels for words in a sentence are then aggregated over all sentences to compute the overall sentiment and emotional composition of each president. This grouping by president allows for an in-depth exploration of the specific emotional and sentimental patterns and variations exhibited by each president in their speeches. This approach thus offers the positivity/negativity metric offered by the AFINN lexicon, but also decomposes these broad categories into specific emotions.

## RESULTS


### AFINN


```{python}
#!pip install afinn
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import nltk
from sklearn.preprocessing import StandardScaler
from afinn import Afinn
 
#instantiate afinn
afn = Afinn()
data = pd.read_csv("finalSentences2.csv")

# compute scores (polarity) and labels
scores = [afn.score(sentence) for sentence in data["Sentences"]]
sentiment = ['positive' if score > 0
						else 'negative' if score < 0
							else 'neutral'
								for score in scores]
	
# dataframe creation
afn_df = pd.DataFrame()
afn_df['Presidents'] = data['Presidents']
afn_df['Sentences'] = data['Sentences']
afn_df['scores'] = scores
afn_df['sentiments'] = sentiment

# scaler = StandardScaler()
# scaled_data = scaler.fit_transform(afn_df['scores'].values.reshape(-1,1))
# afn_df['scores'] = scaled_data.squeeze()

```

The mean sentiment scores per president show President Mbeki exhibiting the highest mean sentiment score at approximately 1.65, suggesting a generally positive sentiment in his speeches. President Motlanthe followed closely with a mean sentiment score of approximately 1.44, indicating a similar trend of positively oriented speeches. In contrast, President de Klerk presented the lowest mean sentiment score, around 0.67, while Presidents Ramaphosa and Zuma demonstrated mean sentiment scores around 0.95 and 0.92, respectively.

```{python}

presidents_order = ['Mandela', 'deKlerk', 'Mbeki', ' Motlanthe', 'Zuma', 'Ramaphosa']
mean_scores_per_president = afn_df.groupby('Presidents')['scores'].mean()
adjusted_presidents_order = ['deKlerk'] + [president for president in presidents_order if president != 'deKlerk']
mean_scores_reordered = mean_scores_per_president.reindex(adjusted_presidents_order)

# Plotting the reordered mean sentiment scores
plt.figure(figsize=(12, 7))
mean_scores_reordered.plot(kind='bar', color='skyblue')
plt.title('Mean Sentiment Scores per President')

plt.title("Mean Sentiment Scores per President", fontsize=20)
plt.xlabel('President', fontsize=20)
plt.ylabel('Mean Sentiment Score', fontsize=20)
plt.xticks(rotation=45, fontsize=16)
plt.yticks(fontsize=16)  # Set the font size for y-axis tick labels
plt.tight_layout()
plt.show()

```



```{python}

colors = {'negative': '#FF9999', 'neutral': '#99CCFF', 'positive': '#99FF99'}
sentiment_counts = afn_df.groupby('Presidents')['sentiments'].value_counts(normalize=True).unstack().fillna(0)

sentiment_counts.reindex(adjusted_presidents_order).plot(kind='bar', stacked=True, figsize=(12,7), color=[colors[col] for col in sentiment_counts.columns])
plt.title('Sentiment Distribution per President', fontsize=20)
plt.ylabel('Percentage', fontsize=20)
plt.xlabel('President', fontsize=20)
plt.legend(title='Sentiment', fontsize=20, title_fontsize=20)
plt.tight_layout()
plt.xticks(rotation=45, fontsize=16)
plt.yticks(fontsize=16) 
plt.show()

```

Sentiment over time for each president.

```{python}
from matplotlib.colors import LinearSegmentedColormap
from matplotlib import cm
from matplotlib import cm

def plot_for_president_gradient(president, df):
    # Filter dataframe for the selected president
    president_df = df[df['Presidents'] == president]
    
    # Sorting data by order (using the 'Unnamed: 0' column as the order)
    president_df = president_df.sort_values(by='Unnamed: 0')
    
    # Normalize the scores to [0,1] for colormap
    norm = plt.Normalize(-1, 1)
    
    # Custom colormap: Red -> Gray -> Blue
    custom_cmap = LinearSegmentedColormap.from_list("custom", ["red", "gray", "blue"])
    
    # Plotting with a black background and custom colormap
    fig, ax = plt.subplots(figsize=(10, 5))
    bars = ax.bar(np.arange(len(president_df)), president_df['Sentiment_Score'], 
                  color=custom_cmap(norm(president_df['Sentiment_Score'])), width=1.0)
    
    ax.set_title(f'Sentiment Score over time for President {president}')
    ax.set_xlabel('Order of Sentences')
    ax.set_ylabel('Sentiment Intensity')
    ax.axhline(0, color='white',linewidth=0.5)
    ax.grid(axis='y', color='white', linestyle='--', linewidth=0.5)
    ax.set_facecolor('black')
    fig.colorbar(cm.ScalarMappable(norm=norm, cmap=custom_cmap), ax=ax, label='Sentiment Score')
    
    plt.show()
```

```{python}

presidents_list = afn_df['Presidents'].unique()
def plot_in_grid(president, ax):
    """Plot sentiment scores for a given president on a given axes."""
    president_df = afn_df[afn_df['Presidents'] == president]
    #president_df = president_df.sort_values(by='Unnamed: 0')
    
    # Normalize the scores for colormap
    norm = plt.Normalize(-1, 1)
    custom_cmap = LinearSegmentedColormap.from_list("custom", ["red", "gray", "blue"])

    bars = ax.bar(np.arange(len(president_df)), president_df['scores'], 
                  color=custom_cmap(norm(president_df['scores'])), width=1.0)
    ax.set_title(f'{president}', fontsize=20)
    ax.axhline(0, color='white', linewidth=0.5)
    ax.grid(axis='y', color='white', linestyle='--', linewidth=0.5)
    ax.set_facecolor('black')

# Creating a 2x3 grid plot for all presidents
fig, axes = plt.subplots(2, 3, figsize=(18, 10))
fig.suptitle('Sentiment Scores over time for each President', fontsize=20)

for president, ax in zip(adjusted_presidents_order, axes.ravel()):
    plot_in_grid(president, ax)

# Adjust layout
plt.tight_layout()
plt.subplots_adjust(top=0.90)

for ax in axes.ravel():
    ax.tick_params(axis='x', labelrotation=45, labelsize=16)
    ax.tick_params(axis='y', labelsize=16)

# Set x and y labels fontsize
for ax in axes[1, :]:
    ax.set_xlabel('Sentences', fontsize=20)
for ax in axes[:, 0]:
    ax.set_ylabel('Scores', fontsize=20)

plt.show()
```



The histograms below show the sentiment score distribution for the presidents. All histograms appear to be slightly skewed to the left, indicating a high frequency of positive sentiment. Mandela appears to have the most evenly spread sentiment distribution, with the fewest number of protruding bars, while de Klerk mainly has a uniform sentiment distribution, with a notable deviation from that occuring in the neutral sentiment territory. Ramaphosa's, Mbeki's and Zuma's sentiment distributions are both centered on the positive side of zero, indicating a generally positive sentiment, while Motlanthe's most common sentiment is actually slightly negative, however that is offset by the high frequency of positive sentiments.

```{python}

pastel_colors = ['#FFB3BA', '#FFDFBA', '#FFFFBA', '#BAFFC9', '#BAE1FF', '#D9BAFF']

def plot_histogram(president, color, ax):
    """Plot histogram of sentiment scores for a given president on a given axes."""
    president_df = afn_df[afn_df['Presidents'] == president]
    
    x_range = max(president_df['scores']) - min(president_df['scores'])
    half_x_range = x_range / 2
    
    # Set the x-axis limits to center the histogram around 0
    ax.set_xlim(-10, 10)

    ax.hist(president_df['scores'], bins=30, color=color, edgecolor='white')
    ax.set_title(f'{president}', fontsize=20)
    ax.set_xlabel('Sentiment Score', fontsize=20)
    ax.set_ylabel('Frequency', fontsize=20)
    ax.tick_params(axis='x', labelsize=16)
    ax.tick_params(axis='y', labelsize=16)
    ax.grid(axis='y', linestyle='--', linewidth=0.5)

# Creating a 2x3 grid plot for histograms of all presidents
fig, axes = plt.subplots(2, 3, figsize=(18, 10))
fig.suptitle('Distribution of Sentiment Scores for each President', fontsize=20)

for president, color, ax in zip(adjusted_presidents_order, pastel_colors, axes.ravel()):
    plot_histogram(president, color, ax)

# Adjust layout
plt.tight_layout()
plt.subplots_adjust(top=0.90)
plt.show()

```


##############


Another rule based way to do sentiment analysis involving a new dictionary:

The NRC (National Research Council) Emotion Lexicon, is a dictionary of words and their associed emotions and sentiments. This lexicon was developed by the National Research Council of Canada and is particularly designed for sentiment analysis and emotion analysis in text.

It includes thousands of English words and provides information about how strongly each word is associated with various emotions and sentiments. For each word in the lexicon, it indicates whether the word is associated with a specific emotion or sentiment, and if so, to what degree. The emotional and sentiment categories covered include: Anger, Anticipation, Disgust, Fear, Joy, Negative sentiment, Positive sentiment, Sadness, Surprise, Trust.

Foe each it provides intensity scores that indicate the strength of the association. These intensity scores are typically represented as values between 0 and 1, where higher values indicate a stronger association with the emotion or sentiment.

```{python}
import pandas as pd
from nrclex import NRCLex

# Function to find the top emotions for a text
def find_top_emotions(text):
    emotion = NRCLex(text)
    return emotion.top_emotions

# Apply the function to each row in the DataFrame
data['Top_Emotions'] = data['Sentences'].apply(find_top_emotions)

unique_emotion_columns = ['fear', 'anger', 'anticipation','anticip', 'trust', 'surprise', 'positive', 'negative', 'sadness', 'disgust', 'joy']
presidents = data['Presidents'].unique()

president_dataframes = {president: pd.DataFrame(0, columns=unique_emotion_columns, index=[0]) for president in presidents}

for index, row in data.iterrows():
    president = row['Presidents']
    emotions = dict(row['Top_Emotions'])
    #president_df = president_dataframes[president]
    
    # Iterate through unique_emotion_columns
    for emotion_column in emotions.keys():
        if emotion_column in emotions:
            value = emotions[emotion_column]
            president_dataframes[president][emotion_column] += value

president_dataframes['Mandela']

for pres in presidents:
    president_dataframes[pres] = president_dataframes[pres].div(president_dataframes[pres].sum(axis=1), axis=0)

for president, df in president_dataframes.items():
    if 'anticipation' in df.columns and 'anticip' in df.columns:
        df['anticipation'] += df['anticip']  # Add 'anticip' to 'anticipation'
        df.drop(columns=['anticip'], inplace=True)  # Remove 'anticip' column

```

Using the NRC emotion lexicon we see that all presidents have their most common sentiment being positive, while the particular emotions in there sentences differ. A common emotion amongst all presidents is trust. Anticipation is a frequently evoked emotion from the presidents, besides for deKlerk. Other relatively common emotions include fear and joy. 
```{python}

fig, axes = plt.subplots(2, 3, figsize=(18, 10))
fig.suptitle('Distribution of Sentiment Scores for each President', fontsize=20)

order = ['deKlerk','Mandela', 'Mbeki', ' Motlanthe', 'Zuma', 'Ramaphosa']

for president, ax, colour in zip(order, axes.ravel(), pastel_colors):
    data = president_dataframes[president]
    x = list(data.keys())
    y = data.values.squeeze()
    ax.set_ylim(0, 0.5)
    ax.bar(x, y, color=colour)
    ax.set_title(president, fontsize=20)
    # ax.set_xlabel('Sentiment Category', fontsize=16)
    ax.set_ylabel('Sentiment Score', fontsize=16)
    ax.tick_params(axis='x', labelrotation=45, labelsize=16)
    ax.tick_params(axis='y', labelsize=16)

# Adjust layout
plt.tight_layout()
plt.subplots_adjust(top=0.90)
plt.show()
```


# maybe i can take out the positive and negative ones to make it all stand out more